<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\MIC_SPK_Wrap.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\MIC_SPK_Wrap.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Sep 26 14:36:49 2016
<BR><P>
<H3>Maximum Stack Usage =         64 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; RecordStart &rArr; InitialADC &rArr; DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACMP_IRQHandler</a> from boot_isd93xx.o(i.ACMP_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from drvadc.o(i.ADC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[10]">ALC_IRQHandler</a> from boot_isd93xx.o(i.ALC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[b]">BOD_IRQHandler</a> from boot_isd93xx.o(i.BOD_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1e]">CAPS_IRQHandler</a> from boot_isd93xx.o(i.CAPS_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[17]">DPWM_IRQHandler</a> from boot_isd93xx.o(i.DPWM_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[12]">Default_IRQHandler</a> from boot_isd93xx.o(i.Default_IRQHandler) referenced 11 times from boot_isd93xx.o(vectors)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from drvgpio.o(i.EINT0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from drvgpio.o(i.EINT1_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from drvgpio.o(i.GPAB_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[19]">GPIO_IRQHandler</a> from boot_isd93xx.o(i.GPIO_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[7]">HardFault_Handler</a> from boot_isd93xx.o(i.HardFault_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from boot_isd93xx.o(i.I2C0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1d]">I2S_IRQHandler</a> from boot_isd93xx.o(i.I2S_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[6]">NMI_Handler</a> from boot_isd93xx.o(i.NMI_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[21]">PDMA0_Callback</a> from recordpcm.o(i.PDMA0_Callback) referenced from recordpcm.o(i.PDMA0forMIC)
 <LI><a href="#[22]">PDMA1_Callback</a> from playpcm.o(i.PDMA1_Callback) referenced from playpcm.o(i.PDMA1forDPWM)
 <LI><a href="#[1c]">PDMA_IRQHandler</a> from drvpdma.o(i.PDMA_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[11]">PWMA_IRQHandler</a> from boot_isd93xx.o(i.PWMA_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from boot_isd93xx.o(i.PendSV_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[20]">RTC_IRQHandler</a> from boot_isd93xx.o(i.RTC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[23]">Reset_Handler</a> from boot_isd93xx.o(i.Reset_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from boot_isd93xx.o(i.SPI0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[8]">SVC_Handler</a> from boot_isd93xx.o(i.SVC_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from boot_isd93xx.o(i.SysTick_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1a]">TALARM_IRQHandler</a> from boot_isd93xx.o(i.TALARM_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from boot_isd93xx.o(i.TMR0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from boot_isd93xx.o(i.TMR1_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[15]">UART02_IRQHandler</a> from drvuart.o(i.UART02_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[c]">WDT_IRQHandler</a> from boot_isd93xx.o(i.WDT_IRQHandler) referenced from boot_isd93xx.o(vectors)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[27]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[28]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[60]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[61]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[62]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[63]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[64]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[65]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[66]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[67]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[68]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[70]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[71]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[72]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[73]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[31]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[74]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[7a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[29]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RecordStart &rArr; InitialADC &rArr; DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[30]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[7e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[32]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetPGAGaindB
</UL>

<P><STRONG><a name="[82]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2f]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[84]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[85]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.ACMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drvadc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>ALC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.ALC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.BOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1e]"></a>CAPS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.CAPS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[17]"></a>DPWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.DPWM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>Default_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.Default_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[5b]"></a>DrvADC_AnaOpen</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_AnaOpen))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>DrvADC_Open</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, drvadc.o(i.DrvADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[49]"></a>DrvADC_PGAMute</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_PGAMute))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[4a]"></a>DrvADC_PGAUnMute</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_PGAUnMute))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[53]"></a>DrvADC_PdmaEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_PdmaEnable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
</UL>

<P><STRONG><a name="[3a]"></a>DrvADC_SetAMUX</STRONG> (Thumb, 318 bytes, Stack size 12 bytes, drvadc.o(i.DrvADC_SetAMUX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvADC_SetAMUX
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetAdcChannel
</UL>

<P><STRONG><a name="[39]"></a>DrvADC_SetAdcChannel</STRONG> (Thumb, 522 bytes, Stack size 12 bytes, drvadc.o(i.DrvADC_SetAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetAMUX
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_Open
</UL>

<P><STRONG><a name="[4d]"></a>DrvADC_SetMIC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_SetMIC))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[4b]"></a>DrvADC_SetPGA</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drvadc.o(i.DrvADC_SetPGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvADC_SetPGA
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[3c]"></a>DrvADC_SetPGAGaindB</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drvadc.o(i.DrvADC_SetPGAGaindB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvADC_SetPGAGaindB &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[48]"></a>DrvADC_SetPower</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, drvadc.o(i.DrvADC_SetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvADC_SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[4c]"></a>DrvADC_SetVMID</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, drvadc.o(i.DrvADC_SetVMID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvADC_SetVMID
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>

<P><STRONG><a name="[54]"></a>DrvADC_StartConvert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drvadc.o(i.DrvADC_StartConvert))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
</UL>

<P><STRONG><a name="[51]"></a>DrvDPWM_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[57]"></a>DrvDPWM_EnablePDMA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_EnablePDMA))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[4f]"></a>DrvDPWM_Open</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_Open))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[50]"></a>DrvDPWM_SetDPWMClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_SetDPWMClk))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[3e]"></a>DrvDPWM_SetSampleRate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drvdpwm.o(i.DrvDPWM_SetSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvDPWM_SetSampleRate &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[55]"></a>DrvPDMA_CHEnablelTransfer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_CHEnablelTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[45]"></a>DrvPDMA_CHSoftwareReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_CHSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Open
</UL>

<P><STRONG><a name="[41]"></a>DrvPDMA_EnableInt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drvpdma.o(i.DrvPDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvPDMA_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[5a]"></a>DrvPDMA_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordStart
</UL>

<P><STRONG><a name="[43]"></a>DrvPDMA_InstallCallBack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drvpdma.o(i.DrvPDMA_InstallCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvPDMA_InstallCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[44]"></a>DrvPDMA_Open</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, drvpdma.o(i.DrvPDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvPDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_CHSoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[46]"></a>DrvPDMA_SetCHForAPBDevice</STRONG> (Thumb, 480 bytes, Stack size 12 bytes, drvpdma.o(i.DrvPDMA_SetCHForAPBDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[3f]"></a>DrvSYS_GetHCLK</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, drvsys.o(i.DrvSYS_GetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
</UL>

<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(i.EINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(i.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drvgpio.o(i.GPAB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPAB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[19]"></a>GPIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1d]"></a>I2S_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.I2S_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[47]"></a>InitialADC</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, recordpcm.o(i.InitialADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialADC &rArr; DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetVMID
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetPower
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetPGAGaindB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetPGA
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetMIC
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_PGAUnMute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_PGAMute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordStart
</UL>

<P><STRONG><a name="[4e]"></a>InitialDPWM</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, playpcm.o(i.InitialDPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitialDPWM &rArr; DrvDPWM_SetSampleRate &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetDPWMClk
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_Open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayStart
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[21]"></a>PDMA0_Callback</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, recordpcm.o(i.PDMA0_Callback))
<BR>[Address Reference Count : 1]<UL><LI> recordpcm.o(i.PDMA0forMIC)
</UL>
<P><STRONG><a name="[52]"></a>PDMA0forMIC</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, recordpcm.o(i.PDMA0forMIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PDMA0forMIC &rArr; DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_StartConvert
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_PdmaEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_SetCHForAPBDevice
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Open
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_InstallCallBack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_EnableInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_CHEnablelTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordStart
</UL>

<P><STRONG><a name="[22]"></a>PDMA1_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, playpcm.o(i.PDMA1_Callback))
<BR>[Address Reference Count : 1]<UL><LI> playpcm.o(i.PDMA1forDPWM)
</UL>
<P><STRONG><a name="[56]"></a>PDMA1forDPWM</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, playpcm.o(i.PDMA1forDPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PDMA1forDPWM &rArr; DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_SetCHForAPBDevice
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Open
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_InstallCallBack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_EnableInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_CHEnablelTransfer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_EnablePDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayStart
</UL>

<P><STRONG><a name="[1c]"></a>PDMA_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, drvpdma.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>PWMA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.PWMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[58]"></a>PlayStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, playpcm.o(i.PlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PlayStart &rArr; PDMA1forDPWM &rArr; DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[59]"></a>RecordStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, recordpcm.o(i.RecordStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RecordStart &rArr; InitialADC &rArr; DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA0forMIC
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialADC
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>Reset_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, boot_isd93xx.o(i.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Reset_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1a]"></a>TALARM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TALARM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TMR1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[15]"></a>UART02_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvuart.o(i.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[3b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvsys.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_SetCHForAPBDevice
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetAdcChannel
</UL>

<P><STRONG><a name="[35]"></a>__user_initial_stackheap</STRONG> (Thumb, 30 bytes, Stack size 36 bytes, boot_isd93xx.o(i.__user_initial_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mic_spk.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main &rArr; RecordStart &rArr; InitialADC &rArr; DrvADC_Open &rArr; DrvADC_SetAdcChannel &rArr; DrvADC_SetAMUX
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_AnaOpen
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordStart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[42]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvpdma.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_InstallCallBack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_EnableInt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
